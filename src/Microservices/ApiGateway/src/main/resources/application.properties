spring.application.name=ApiGateway
server.port=8081
spring.cloud.gateway.discovery.locator.enabled=true
spring.main.allow-bean-definition-overriding=true
spring.main.web-application-type=REACTIVE 

spring.cloud.gateway.discovery.locator.lower-case-service-id=true


eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=false
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.cloud.gateway.filter=DEBUG
logging.level.org.springframework.cloud.gateway.router=DEBUG


# Spring Cloud Gateway Route Configuration
spring.cloud.gateway.routes[0].id=product_service
spring.cloud.gateway.routes[0].uri=lb://PRODUCT-SERVICE/   # Using Eureka to resolve service URL
spring.cloud.gateway.routes[0].predicates[0]=Path=/products/**  # Route request path for ProductService
spring.cloud.gateway.routes[0].filters[0]=CircuitBreaker=name=productServiceCircuitBreaker,fallbackUri=forward=/fallback/product

spring.cloud.gateway.routes[1].id=user_service
spring.cloud.gateway.routes[1].uri=lb://USER-SERVICE/   # Using Eureka to resolve service URL
spring.cloud.gateway.routes[1].predicates[0]=Path=/users/  # Route request path for UserService
spring.cloud.gateway.routes[1].filters[0].name= CircuitBreaker
spring.cloud.gateway.routes[1].filters[0].args.name=userServiceCircuitBreaker
spring.cloud.gateway.routes[1].filters[0].args.fallbackUri=forward:/fallback/user


# Circuit Breaker Configuration for ProductService and UserService
resilience4j.circuitbreaker.instances.productServiceCircuitBreaker.registerHealthIndicator=true
# Number of calls used to calculate the failure rate
resilience4j.circuitbreaker.instances.productServiceCircuitBreaker.slidingWindowSize=10
# Threshold for the failure rate in percentage, when the CircuitBreaker should open
resilience4j.circuitbreaker.instances.productServiceCircuitBreaker.failureRateThreshold=50
# Duration the CircuitBreaker should stay open, before it switches to half open, half open is the state where the CircuitBreaker will check if the external call has recovered
resilience4j.circuitbreaker.instances.productServiceCircuitBreaker.waitDurationInOpenState=5000ms
# Number of calls allowed in half open state
resilience4j.circuitbreaker.instances.productServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3

resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.waitDurationInOpenState=5000ms
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3